

=================================================================================================================================================================
# Aula 6: Iniciando o Projeto e Estrutura Inicial do Django

sempre que for criar um novo site em django:
    -instalar o django no ambiente virtual
    -roda o codigo no terminal de comando: django-admin startproject nomedoprojeto .    "PONTO NO FINAL PARA CRIAR 1 PASTA E NÃO 2 PASTAS COM O MESMO NOME"
        ===  django-admin startproject hashflix .   ===

=== python manage.py runserver === esse comando cria um link para acessar o site

=================================================================================================================================================================
# Aula 7: Criando seu 1º app do site

ao abrir o link do site, no navegador digitar admin para aparecer a tela de adm

criando app filme:
    === django-admin startapp filme ===        "DEIXAR O NOME DO APP SEM A LETRA (S), DEIXAR NO SINGULAR MESMO"

após criar o app filme, o próximo passo é criar a estrutura de filmes, essa estrutura ficara em MODELS.PY.
em models.py será criado os filmes, os episódios e os usuários
falta ainda vincular o app com o projeto hashflix

(PASSOS: sempre que criar um novo app, fazer as configurações de: 
    1- settings = "pra instalar o app" da pasta do projeto,
    2- urls da pasta do projeto, pra garantir que os links do app vão aparecer dentro da pasta de urls da pasta projeto 
    3- models pra garantir que as tabelas que construir dentro do app vão aparecer na pagina de adm e vão estar criadas dentro do banco de dados  )

=================================================================================================================================================================
# Aula 8: Migrations e Criando um SuperUser

Inicializando um usuário:
    === python manage.py migrate === 
    o que faz esse comando?
        Sempre que é feita uma modificação no banco de dados é necessário fazer uma migration, a migration vai atualizar o meu banco de dados
        Sempre que quiser fazer uma modificação no banco de dados (ou sempre que fizer uma modificação em um dos arquivos MODELS.PY ), executar os seguintes codigos:
        === python manage.py makemigrations ===
        === python manage.py migrate === 

Criando um superUser (admin)
    === python manage.py createsuperuser ===
    (após o comando ele vai pedir: 
        Username:
        Email: 
        Password: 
        Repetir Password:   )

        Email e senha do adm no projeto:
            Username (leave blank to use 'rodrigo.costa'): rodrigo.costa
            Email address: rodrigo.costa94@yahoo.com.br 
            Password: camile12 ...
            Password (again): camile12 ...


=================================================================================================================================================================
# Aula 9: Conectando um app novo no seu projeto

Depois que vc cria o app, a primeira coisa a fazer é instalar o app dentro dos aplicativos do projeto.

1º
    Para instalar, na pasta do projeto "aqui no caso a pasta é hashflix" vá em settings. 
    A parte que voce tem que mecher sempre que instala um aplicativo é a parte INSTALLED APPS, 
    e em INSTALLED APPS adicionar uma linha com o mesmo nome do app que foi criado, "aqui no caso filme"

2º
    Dentro do arquivo de URL's na pasta do projeto, definir qual é o link que vou querer exibir o aplicativo do filme.
    - na parte de importar modulos, adicionar a função (include) =      from django.urls import path, include     <==== ( include adicionado )
    - copiar:
        === path('blog/', include('blog.urls')) ===
        colar esse path em urlpatterns = [ ... ]

(PASSOS: sempre que criar um novo app, fazer as configurações de: 
    1- settings = "pra instalar o app" da pasta do projeto,
    2- urls da pasta do projeto, pra garantir que os links do app vão aparecer dentro da pasta de urls da pasta projeto 
    3- models pra garantir que as tabelas que construir dentro do app vão aparecer na pagina de adm e vão estar criadas dentro do banco de dados  )


=================================================================================================================================================================
Aula 11: Criando o modelo do Filme - Adicionar tabelas no Banco 

nessa aula vamos contruir os nossos modelos, ou seja as tabelas onde vamos armazenar as informações dos filmes.

dentro da pasta do app "que no caso é filmes", no arquivo MODELS vamos construir e criar o objeto do filme dentro do nosso site 

cada tabela dentro do banco de dados vai ser uma classe do python.

sempre que quiser criar algo novo que o seu site vai ter, e precisar ser salvo no banco de dados, cada coisa dessa será um MODELO dentro do models.py "pasta do app"

Ao criar a classe do filme em models.py "pasta do app", eu defino ela da seguinte maneira:
    class Filme(models.Model):  "filme é uma subclasse de models.Model"
Logo apos isso devo definir os campos/ informações que a minha classe filme tera:

    from django.db import models
    from django.utils import timezone # função timezone para pegar a data da criação

    # Create your models here.

    LISTA_CATEGORIAS = (
        # (informação a ser armazenada no banco de dados , informação que vai aparecer ao usuário ),
        ("ANALISES", "Análises"),
        ("PROGRAMACAO", "Programação"),
        ("APRESENTACAO", "Apresentação"),
        ("OUTROS", "Outros"),
    )

    # Criar o Filme 
    class Filme(models.Model):
        titulo = models.CharField(max_length=100) # Charfield é um campo de texto pequeno
        thumb = models.ImageField(upload_to='thumb_filmes') # quando a pessoa criar um filme, vai ter que fazer upload dessa imagem, e a imagem vai ser armazenada na pasta THUMB_FILMES
        descricao = models.TextField(max_length=1000) # textfield é um campo de texto maior
        categoria = models.CharField(max_length=15, choices = LISTA_CATEGORIAS) # choices são as opções pra essa variavel
        visualizacoes = models.IntegerField(default=0) # IntegerField é um valor numérico
        data_criacao = models.DateTimeField(default=timezone.now) # datetimefield é o formato de data com horario.   //   função timezone para pegar a data da criação

baixar a biblioteca Pillow para o django trabalhar com imagens:
        === pip install pillow ===

agora que criamos uma nova tabela no banco de dados, precisa fazer as migrações para atualizar o banco de dados com os comandos:
        === python manage.py makemigrations ===
        === python manage.py migrate === 
 


=================================================================================================================================================================
# Aula 12: Adicionando o modelo do Filme no Administrador

No arquivo admin do app filmes, digitar:
    from django.contrib import admin
    from .models import Filme    # (IMPORTAR O FILME) o ponto de .models significa que estou importando da mesma pasta, no caso models.py esta na mesma pasta que admin.py

    # Register your models here.
    admin.site.register(Filme)   # (REGISTRAR O FILME)

(Na aula o lira adiciona um filme pela tela de admin, colocando titulo, thumbnail e descrição)

- Ao terminar o registro do filme direto pela tela do admin, ele mostra o filme que foi recem adicionado com o nome de " Filme object(1) ", 
para alterar isso deve-se mexer na classe do filme, adicionando a função de string dele, veja:

        def __str__(self):
            return self.titulo


=================================================================================================================================================================
# Aula 13: Configurando pastas static e media

-Diferença entre STATIC e MEDIA:
    MEDIA: No instagram um usuário pode postar uma foto, essa foto postada é uma media
    STATIC: Uma foto ou imagem que eu criador do instagram subo para definir a logo do instagram é uma STATIC

-Definindo a pasta para os arquivos statics e medias, ((( MAS PRIMEIRAMENTE STATIC ))):
    no site do django documentation, copiei o seguinte trecho de codigo:    

    STATICFILES_DIRS = [
        BASE_DIR / "static",
        "/var/www/static/",
    ]

    Esse trecho de codigo vai ser colado em settings, logo abaixo de STATIC_URL = 'static/'

    Agora que foi definido o nome da minha pasta "static", é preciso criar manualmente essa pasta na pasta principal do arquivo, fora da pasta filmes e da pasta hashflix
    precisa ser criado na pasta raiz, no caso a pasta Django-clone-netflix

-Feito isso é preciso adicionar o seguinte trecho de codigo que foi tirado da pagina de documentação do django em URLPATTERNS da pagina URL's na pasta do projeto "hashflix":
        + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)




                deixando desse jeito (sem alterar o anterior, somente incrementando):


        urlpatterns = [
            path('admin/', admin.site.urls),
            # path('/', include('filme.urls')),
        ]

        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



-também é necessário importar a biblioteca static e settings:
    from django.conf import settings
    from django.conf.urls.static import static





-tudo vai ficar desse jeito:

    from django.contrib import admin
    from django.urls import path, include
    from django.conf import settings
    from django.conf.urls.static import static

    urlpatterns = [
        path('admin/', admin.site.urls),
        # path('/', include('filme.urls')),
    ]

    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


//////////////////////////////////////////////////
((((  agora DEFININDO a parte de MEDIA  ))))

    -adicionando ao arquivo URLs da pasta do projeto "hashflix" o urlpatterns de "media": 
            + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


        vai ficar desse jeito:


            from django.contrib import admin
            from django.urls import path, include
            from django.conf import settings
            from django.conf.urls.static import static

            urlpatterns = [
                path('admin/', admin.site.urls),
                # path('/', include('filme.urls')),
            ]

            urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
            urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)   <=========== adicionado


    Próximo passo é definir as variaveis MEDIA_URL e MEDIA_ROOT do ultimo trecho de codigo adicionado anteriormente ( urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) )
    Para isso é preciso ir no arquivo settings da pasta do projeto "hashflix", e embaixo do STATICFILES_DIRS adicionar :

        STATIC_URL = 'static/'

        STATICFILES_DIRS = [
                BASE_DIR / "static",
                # "/var/www/static/",
            ]

        MEDIA_URL = 'media/'  <==== isso serve para quando o usuario clicar com o botao direito do mouse e abrir a imagem em uma nova guia, esse sera o endereço na barra de pesquisa

        MEDIA_ROOT = BASE_DIR / "media" <===== definindo as pastas onde vai ficar as medias


    Feito isso (definindo as pastas onde vai ficar as medias), criar uma nova pasta chamada de "media" no projeto principal 
    (fora da pasta do projeto e de apps, na PASTA RAIZ, no caso na pasta Django clone netflix) assim como foi feito com pasta static anteriormente.

        CRIAR PASTA "MEDIA" NA PASTA RAIZ DO PROJETO


    Após isso, ir na pagina de adm, e adicionar uma imagem manualmente no app e clicar em salvar, 
    isso fara com que agora a imagem seja salva na pasta thumb_filmes dentro da pasta media


=================================================================================================================================================================
# Aula 14: Criando uma página do nosso site

- No arquivo urls.py da pasta do projeto "hasflix", descomentar a ultima linha, em include deixar "include('filme.urls')" e deixar o path vazio, 
pois o app filmes vai gerenciar todo o projeto

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('filme.urls')),    <============ ( o app filmes vai gerenciar todo o projeto, VAI SER A MINHA HOMEPAGE)
    ]

-Para cada pagina criada no site, é necessário sempre criar 3 coisas:
    1 - URL <==== link onde a pagina vai aparecer
    2 - VIEW <==== código em python que vai dizer o que vai acontecer qundo a pessoa acessar aquele link. ex: puxar algo do banco de dados para exibir , redirecionar para uma nova pagina
    3 - TEMPLATE <==== parte visual, o html


//////////////////////////////////////////////////
((( configurando o url do app filmes  )))

- no app filmes criar um arquivo urls.py

- A forma que se configura o URL do app de filmes é a mesma forma que foi configurado o URL padrão do projeto principal "hashflix", 
então pode copiar o codigo do arquivo urls.py e colar no arquivo 

        from django.contrib import admin               <============ excluir
        from django.urls import path, include
        from django.conf import settings               <============ excluir
        from django.conf.urls.static import static     <============ excluir

        urlpatterns = [
            path('admin/', admin.site.urls),           <============ excluir ( ja foi configurado )
            path('', include('filme.urls')),
        ]




    vai ficar assim:

        from django.urls import path, include

        urlpatterns = [
            path('', include('filme.urls')),
        ]


    agora apague o include e coloque homepage:

        from django.urls import path, include
        from .views import homepage             <============ adicionar importação

        urlpatterns = [
            path('', homepage),
        ]


- no arquivo view.py do app "filme" criar função homepage, essa função precisa receber o argumento request:

    from django.shortcuts import render

    # Create your views here.

    def homepage(request):
        return render(request, "homepage.html")  # <============ precisa ser passado 2 parametros, 1 - REQUEST, 2 - NOME DO TEMPLATE




=================================================================================================================================================================

# Aula 15: Criando seus templates e a estrutura de templates do site:

- Na pasta do app "no caso filme", criar uma pasta chamada templates (essa vai ser a pagina de templates somente do app)

- dentro dessa pasta templates que foi criado na pasta do app, criar um arquivo html, 
que no caso foi criado com o nome "homepage.html" juntamente com a estrutura base em html ( usar o comando= ! + tab) junto com uma tag h1 "Essa é a homepage"

-Após isso criar uma pagina templates só que na pagina raiz de todo o projeto, no caso a pasta django-clone-netflix


=================================================================================================================================================================
# Aula 16: Criando uma base em html e conectando aos templates

- Na pasta templates da pasta raiz (pasta templates de fora ), criar 2 arquivos html juntamente com a sua estrutura base:
    1- base.html
    2- navbar.html

- No arquivo base.html, mudar a tag title:
    <title>
        {% block titulo %}
        {% endblock  %}
    </title>

- Na pasta templates do app filmes, ir no arquivo homepage.html e apagar toda a estrutura html feita anteriormente adicionando o seguinte:
    {% extends 'base.html' %}

- Extra:
    em settings.py que esta na pasta do projeto "hashflix", ir em templates , e em dirs digitar 'template' dentro do colchetes, veja:

        TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': ['templates'],                                          <============ Adicionar 'template' dentro do colchetes
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

=================================================================================================================================================================
# Aula 17: Criando o navbar e editando html com tailwind

- O bootstrap vai ser utilizado tambem, mas apenas com formulários, isso devido ao bootstrap ja ter uma integração com o django
- O tailwind será utilizado no restante do projeto

- pegar cdn do tailwind e do bootstrap para adicionar ao projeto, adicionando ao fim do head da pagina base.html:

        <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

        {% block head %}           <============ Adicionar bloco para adicionar scripts da pagina futuramente
        {% endblock %}             <============ Adicionar bloco para adicionar scripts da pagina futuramente
    </head> 

- apagar a estrutura base em html do arquivo navbar.html












=================================================================================================================================================================
# Aula 20: Passando parâmetros para as páginas html - Context

- como pegar informações do banco de dados e do django e inserir nas paginas? pra fazer isso é preciso passar um CONTEXT

- CONTEXT é o contexto da pagina html especifica, o context é um dicionário python que voce vai criar dentro da view e passar como parametro pra pagina html,
e esse parametro vai permitir que quando eu chegue na pagina html, eu possa usar tags em python pra carregar informações desse dicionario


- como exemplo, criamos a view homefilmes. com a view homefilmes iremos mostrar os dados do banco de dados ao usuário. 
Lembrando, para criar uma nova pagina é necessário criar a view / url / html.   veja como ficou a view:

            from django.shortcuts import render
            from .models import Filme                    # <============ Realizada a importação da classe Filme "que está em models" para ter acesso as informações do banco de dados

            # criar: url - view - html

            # Create your views here.

            def homepage(request):
                return render(request, "homepage.html")  # <============ precisa ser passado 2 parametros, 1 - REQUEST, 2 - NOME DO TEMPLATE


            def homefilmes(request):
                context = {}                                       # <============ context é um dicionário python
                lista_filmes = Filme.objects.all()                 # <============ PEGANDO INFORMAÇÕES DO BANCO DE DADOS 
                context['lista_filmes'] = lista_filmes             # <============ criei uma chave lista_filmes e estou atribuindo valor a essa chave
                return render(request, "homefilmes.html", context) # <============ Na função render posso passar um novo parametro, que é o context


- e no arquivo homefilmes fiz da seguinte forma:
    {% extends 'base.html' %}

    {% comment %} {% load static %} {% endcomment %}

    {% block titulo %}
        HomePage Hashflix
    {% endblock %}

    {% block content %}
    <h1> Essa é a pagina Homefilmes </h1>

    {{ lista_filmes }}                       # <============ ESSA É A CHAVE DE CONTEXT que anteriormente estava recebendo a variavel lista_filmes, esse parametro é passado como uma variavel

    {% endblock %}


- Mudando um pouco o codigo que foi feito anteriormente:

        {% extends 'base.html' %}

        {% comment %} {% load static %} {% endcomment %}

        {% block titulo %}
            HomePage Hashflix
        {% endblock %}

        {% block content %}

            <h1> Essa é a pagina Homefilmes </h1>
            {% for filme in lista_filmes %}         # <============ é possivel fazer um for diretamente
            <hr>
            <p>{{ filme }}</p>                      # <============ vai mostrar o titulo
            <p>{{ filme.descrcao }}</p>             # <============ adiciona a descrição
            <img src="{{filme.thumb.url}}" >        # <============ adiciona a imagem
            {% endfor %}                            # <============ Finaliza o for

        {% endblock %}









=================================================================================================================================================================
# Aula 21: Transformando nossas Views em Classes

////////////////////////////////////////////////////////
- A seguir é o arquivo views.py na pasta do app "filme" :

    from django.shortcuts import render
    from .models import Filme
    from django.views.generic import TemplateView, ListView

    # criar: url - view - html

    # Create your views here.
    class Homepage(TemplateView):
        template_name = "homepage.html"
        
    # o objetivo da classe Homefilmes é exibir uma lista de filmes (uma lista de objetos no banco de dados) 
    # então quando vc tem uma view cujo objetivo é exibir uma lista de itens do seu banco de dados vc pode importar de uma listView
    # Uma list View  espera que voce passe 2 informações, o template_name e o modelo

    class Homefilmes(ListView):      

        template_name = "homefilmes.html"
        model =  Filme    # <======== model é o modelo do banco de dados que eu vou pegar a minha lista. 

        # Com o uso do listview e do model ele vai me retornar uma object_list, esse object_list eu devo passar para o html da pagina especifica, no caso "Homefilmes"


//////////////////////////////////////
- A seguir é o arquivo homefilmes.py:

    {% extends 'base.html' %}

    {% comment %} {% load static %} {% endcomment %}

    {% block titulo %}
        HomePage Hashflix
    {% endblock %}

    {% block content %}

        <h1> Essa é a pagina Homefilmes </h1>

        {% comment %} {% for filme in lista_filmes %}    <====== Método anterior feito com function      {% endcomment %}

        {% for filme in object_list %}                   <====== lista_filmes substituido por object_list, que é a lista que o listview retorna
        <hr>
        <p>{{ filme }}</p>
        <p>{{ filme.descricao }}</p>
        <img src="{{filme.thumb.url}}" >
        {% endfor %}

    {% endblock %}





=================================================================================================================================================================
# Aula 22: Criando uma View para cada Filme

- quero fazer o seguinte: Quando clicar na imagem do filme, quero que ele me mostra os detalhes daquele filme (informações), pra isso eu uso o detailView. (abaixo o arquivo views):

    from django.shortcuts import render
    from .models import Filme
    from django.views.generic import TemplateView, ListView, DetailView


    class Homepage(TemplateView):
        template_name = "homepage.html"
        
        
    class Homefilmes(ListView):  
        template_name = "homefilmes.html"
        model =  Filme    


    #  vai criar uma pagina para cada filme
    class Detalhesfilme(DetailView):                  <=================== Criando uma nova classe e usando o DetailView
        template_name = "detalhesfilme.html"
        model = Filme
        # no listview ele retornava uma lista,  e a variavel digamos a ser renderizada no html era object_list
        # no detailview, a variavel a ser renderizada no html será o object (apenas 1 item)



- Após isso, foi criado outro arquivo html chamado "detalhesfilme.html", nesse arquivo foi colocado a estrutura da pagina:

    {% extends 'base.html' %}

    {% comment %} {% load static %} {% endcomment %}

    {% block titulo %}
        HomePage Hashflix
    {% endblock %}

    {% block content %}

        <h1> Esse é o detalhe do filme: {{object.titulo}}</h1>
        <p>{{object}}</p>
        <p>{{object.descricao}}</p>
        <img src = "{{object.thumb.url}}">

    {% endblock %}



- Feito isso, é necessario adicionar um link para cada filme de forma automática, então na pasta do app "filmes" no arquivo urls.py foi feito o seguinte:

        from django.urls import path, include
        from .views import Homefilmes, Homepage, Detalhesfilme      # <====== adicionado a classe Detalhesfilme

        urlpatterns = [
            path('', Homepage.as_view()),
            path('filmes/', Homefilmes.as_view()),
            path('filmes/<int:pk>', Detalhesfilme.as_view()), # <========== (adicionado o path para cada filme) entre <> foi passado o parametro pk (dev ser especificado o tipo de parametro. ex int, str ...), pk é Primary Key, ele serve para colocar um id no path de cada filme de maneira automática
        ]



=================================================================================================================================================================
# Aula 23: Criando links dinâmicos no site

- digamos que o meu site tem o "link hashflix.com.br" e depois eu queira mudar para "hashflix.com" eu teria que alterar todos os links que são estáticos. 
Mas existe uma forma para arrumar isso com links dinamicos. Quando coloco uma tag de link "<a href="" ></a>" , 
no href eu consigo passar um parametro pra exibir a url que corresponde a uma view especifica, esse parametro deve ser definido no arquivo urls.py da pasta do app "filmes"

    -esse é o arquivo detalhesfilme (foi adicionado um link):
            {% extends 'base.html' %}

            {% block titulo %}
                HomePage Hashflix
            {% endblock %}

            {% block content %}

                <h1> Essa é a pagina Homefilmes </h1>

            {% for filme in object_list %}
                <hr>
                <a href=""><p>{{ filme }}</p></a>                <====== adicionado um link
                <p>{{ filme.descricao }}</p>
                <img src="{{filme.thumb.url}}" >
            {% endfor %}

            {% endblock %}



    -esse é o arquivo urls.py da pasta do app "filmes":
            from django.urls import path, include
            from .views import Homefilmes, Homepage, Detalhesfilme      

            app_name='filme'                              # <========== Adicionado ( essa variavel vai ser passada para o arquivo urls.py do projeto "hashflix")

            urlpatterns = [
                path('', Homepage.as_view(), name='homepage'),                         # <========== adicionado a variavel name para o path de um link dinamico
                path('filmes/', Homefilmes.as_view(), name='homefilmes'),              # <========== adicionado a variavel name para o path de um link dinamico
                path('filmes/<int:pk>', Detalhesfilme.as_view(),name='detalhesfilme'), # <========== adicionado a variavel name para o path de um link dinamico
            ]



    - esse é o arquivo urls.py da pasta do projeto "hashflix":
            from django.contrib import admin
            from django.urls import path, include
            from django.conf import settings
            from django.conf.urls.static import static

            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('filme.urls, namespace = "filme"')),  # <============  namespace foi incluido dentro de include para link dinamico
            ]

            urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
            urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



    - adicionando as urls no arquivo homefilmes.html:
            {% extends 'base.html' %}

            {% block titulo %}
                HomePage Hashflix
            {% endblock %}

            {% block content %}

                <h1> Essa é a pagina Homefilmes </h1>

            {% for filme in object_list %}
                <hr>
                <a href="{% url 'filme:detalhesfilme' filme.id %}"><p>{{ filme }}</p></a>     <========== Na tag url eu defino qual link eu tenho que pegar 'filme:detalhesfilme' e passar o parametro id ou pk caso tiver
                <p>{{ filme.descricao }}</p>
                <img src="{{filme.thumb.url}}" >
            {% endfor %}

            {% endblock %}



=================================================================================================================================================================
# Aula 24: Modelo de Episódios e Chave Estrangeira

- no arquivo models.py na pasta templates da pasta filmes, foi criado a classe Episodios:

    from django.db import models
    from django.utils import timezone # função timezone para pegar a data da criação

    LISTA_CATEGORIAS = (
        # (informação a ser armazenada no banco de dados , informação que vai aparecer ao usuário ),
        ("ANALISES", "Análises"),
        ("PROGRAMACAO", "Programação"),
        ("APRESENTACAO", "Apresentação"),
        ("OUTROS", "Outros"),
    )

    # Criar o Filme 
    class Filme(models.Model):
        titulo = models.CharField(max_length=100) # Charfield é um campo de texto pequeno
        thumb = models.ImageField(upload_to='thumb_filmes') # quando a pessoa criar um filme, vai ter que fazer upload dessa imagem, e a imagem vai ser armazenada na pasta THUMB_FILMES
        descricao = models.TextField(max_length=1000) # textfield é um campo de texto maior
        categoria = models.CharField(max_length=15, choices = LISTA_CATEGORIAS) # choices são as opções pra essa variavel
        visualizacoes = models.IntegerField(default=0) # IntegerField é um valor numérico
        data_criacao = models.DateTimeField(default=timezone.now) # datetimefield é o formato de data com horario.   //   função timezone para pegar a data da criação
        
        def __str__(self):
            return self.titulo
        

    # criar os episodios
    class Episodio(models.Model):
        filme = models.ForeignKey('Filme', related_name="episodios" on_delete = models.CASCADE)  # <======== chave estrangeira faz referencia do episodio ao filme, dentro dessa chave tem que ser passado o nome da classe, que no caso é Filme
                        # <======== O ON_DELETE = MODELS.CASCADE serve para quando eu deletar o filme, os seus episódios sejam apagados também
        titulo = models.CharField(max_length=100)
        video = models.URLField()


- E na tela admin foi registrado os episodios:

        from django.contrib import admin
        from .models import Filme, Episodio          # <======== Foi adicionado Episodios

        admin.site.register(Filme)                   
        admin.site.register(Episodio)                # <======== Foi adicionado Episodios



=================================================================================================================================================================
Aula 25: Vídeos em Tela Cheia e Listando Episódios no HTML

- No arquivo detalhesfilme foi feito as seguintes alterações:
        {% extends 'base.html' %}

        {% comment %} {% load static %} {% endcomment %}

        {% block titulo %}
            HomeFilmes Hashflix
        {% endblock %}

        {% block content %}

            <div class="py-10">
                <h1> Esse é o detalhe do filme: {{object.titulo}}</h1>
                <p>{{object}}</p>
                <p>{{object.descricao}}</p>
                <img src = "{{object.thumb.url}}">

                <h2>Episódios</h2>
                {% for episodio in object.episodios.all%}                                  # <======== foi feito um for para mostrar os episodios
                    <a href="{{ episodio.video}}">                                         # <======== referencia do video
                        <p>Episódio {{ forloop.counter }} : {{ episodio.titulo }} </p>     # <======== vai mostrar: episodio 2: como aprender python
                    </a>
                {% endfor %}
            </div>    

        {% endblock %}




=================================================================================================================================================================
# Aula 26: Passando variáveis personalizadas para as Views

- No arquivo views.py foram feitas as alterações para passar uma variavel ca classe Filmes para a classe Detalhesfilme:

        from django.shortcuts import render
        from .models import Filme
        from django.views.generic import TemplateView, ListView, DetailView

        class Homepage(TemplateView):
            template_name = "homepage.html"
            
            
        class Homefilmes(ListView):  
            template_name = "homefilmes.html"
            model =  Filme    


        class Detalhesfilme(DetailView):
            template_name = "detalhesfilme.html"
            model = Filme

            def get_context_data(self, **kwargs):                                     <====== adicionado a função get_context_data para acessar os filmes
                context = super(Detalhesfilme, self).get_context_data(**kwargs)       <====== deixar o context na primeira linha
                filmes_relacionados = Filme.objects.filter(categoria = self.get_object().categoria)[0:5]  # <====== essa linha está pegando os objects da classe Filmes, no caso pegando 5 filmes cuja categoria são relacionadas com o filme escolhido
                context['filmes_relacionados'] = filmes_relacionados
                return context



=================================================================================================================================================================
# Aula 27: Criando nossos Gerenciadores de Contexto - Variáveis (para acessar informações de qualquer view)

- Na pasta do app "filmes", foi criado um novo arquivo com o nome "context.py" ou "novos_context":

        from .models import Filme


        def lista_filmes_recentes(request):
            lista_filmes = Filme.objects.all()order_by('-data_criacao')[0:10] # <======== vai criar uma lista de filmes oredenada DE MANEIRA DECRESCENTE ( -data_criacao ) pela data de criação. 
            return {"lista_filmes_recentes": lista_filmes}


        def lista_filmes_emalta(request):
            lista_filmes = Filme.objects.all()order_by('-visualizacoes')[0:10]
            return {"lista_filmes_emalta": lista_filmes}



- No arquivo settings.py, na area de templates foi adicionado os contexts (as 2 funções: lista_filmes_recentes, lista_filmes_emalta):

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': ['templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                        'filme.novos_context.lista_filmes_recentes',               <=========== adicionado
                        'filme.novos_context.lista_filmes_emalta',                 <=========== adicionado
                    ],
                },
            },
        ]



- No arquivo homefilmes foi adicionado:

        {% extends 'base.html' %}

        {% comment %} {% load static %} {% endcomment %}

        {% block titulo %}
            HomePage Hashflix
        {% endblock %}

        {% block content %}
        <div class="py-10">
            <h1> Essa é a pagina Homefilmes </h1>
            {% comment %} {% for filme in lista_filmes %}    <====== Método anterior feito com function      {% endcomment %}
            {% for filme in object_list %}
                <hr>
                <a href="{% url 'filme:detalhesfilme' filme.id %}"><p>{{ filme }}</p></a>
                <p>{{ filme.descricao }}</p>
                <img src="{{filme.thumb.url}}" >
            {% endfor %}
        </div>

        <div class="py-10" >                         <=========== adicionado
            <h2>Novo</h2>
            {{ lista_filmes_recentes }}              <=========== adicionado
        </div>

        {% endblock %}




=================================================================================================================================================================
# Aula 28: Contagem de Visualizações

- A idéia é adicionar a contagem de visualização quando o usuário entrar na pagina, foi feito o seguinte:

        from django.shortcuts import render
        from .models import Filme
        from django.views.generic import TemplateView, ListView, DetailView

        class Homepage(TemplateView):
            template_name = "homepage.html"
            
            
        class Homefilmes(ListView):  
            template_name = "homefilmes.html"
            model =  Filme    


        #  vai criar uma pagina para cada filme
        class Detalhesfilme(DetailView):
            template_name = "detalhesfilme.html"
            model = Filme
            
            def get(self,request,*args,**kwargs):                  # <====== (Adicionado função get) por padrão o get recebe esses 4 argumentos, a função get vai retornar ao usuário o link que ela está querendo acessar
            
                # descobrir qual filme ele está acessando:
                filme = self.get_object()
                filme.visualizacoes += 1
                filme.save                                                      # <===== salva a modificação no banco de dados
                return super(Detalhesfilme, self).get(request, *args, **kwargs)
            
            def get_context_data(self, **kwargs):
                context = super(Detalhesfilme, self).get_context_data(**kwargs)
                filmes_relacionados = Filme.objects.filter(categoria = self.get_object().categoria)[0:5]  
                context['filmes_relacionados'] = filmes_relacionados
                return context


=================================================================================================================================================================
# Aula 31: Edições Dinâmicas com Javascript e Filme em Destaque

Na pagina filmes, quero deixar a imagem de fundo com o filme destaque (o filme mais novo), mas por enquanto a image é estatica, 
e para mudar isso preciso passar uma variável no lugar dessa imagem de fundo, então farei isso com context adicionando uma nova 
função no arquivo novos_context para passar essa variavel. Veja:

- No arquivo novos_context.py foi adicionado uma nova função:

        from .models import Filme

        def lista_filmes_recentes(request):
            lista_filmes = Filme.objects.all().order_by('-data_criacao')[0:8] 
            return {"lista_filmes_recentes": lista_filmes}


        def lista_filmes_emalta(request):
            lista_filmes = Filme.objects.all().order_by('-visualizacoes')[0:8]
            return {"lista_filmes_emalta": lista_filmes}


        def filme_destaque(request):                                             <============ Nova Função
            filme = Filme.objects.order_by('-data-criacao')[0]
            return {"filme_destaque" : filme}


- Após adicionar a função no arquivo novos_context, no arquivo settings.py adicionar a função que foi criada na area de templates em context_processors:

        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': ['templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                        'filme.novos_context.lista_filmes_recentes',
                        'filme.novos_context.lista_filmes_emalta',
                        'novos_context.filme_destaque',                     # <======== Adicionando a função criada filme_destaque
                    ],
                },
            },
        ]


- Simplificando um pouco o meu arquivo novos_context.py :

        from .models import Filme

        def lista_filmes_recentes(request):
            lista_filmes = Filme.objects.all().order_by('-data_criacao')[0:8] 
            filme_destaque = lista_filmes[0]                                                     # <======== Filme destaqueé o meu primeiro filme mais recente
            return {"lista_filmes_recentes": lista_filmes, "filme_destaque" : filme_destaque}    # <======== Modificando o return



        def lista_filmes_emalta(request):
            lista_filmes = Filme.objects.all().order_by('-visualizacoes')[0:8]
            return {"lista_filmes_emalta": lista_filmes}




- Feito isso, agora no meu arquivo homefilmes.py devo mudar a imagem de estática para variável:

    - como era anteriormente:

            <main class='bg-primary_black min-h-screen w-full'>
                <section class="h-screen relative bg-no-repeat pb-8 pl-6 flex items-end bg-cover" style="background-image: url('{% static 'images/python.png' %}');">   
                    <div>
                        <h2 class="text-6xl font-semibold text-white my-4">
                            TITULO
                        </h2>
                        <p class=" w-11/12 md:w-5/12 font-medium text-white my-4">
                            DESCRICAO
                        </p>
                        <div class="flex my-4">
                            <a href="#">
                                <button class="flex items-center bg-white py-2 px-5 rounded-md" style='color:black;'>
                                    <ion-icon name="play" class="text-2xl"></ion-icon>
                                    <span class="ml-3 font-medium " >
                                        Play
                                    </span>
                                </button>
                            </a>
                        </div>
                    </div>
                </section> 



    -como ficou agora:

            <main class='bg-primary_black min-h-screen w-full'>
                <section class="h-screen relative bg-no-repeat pb-8 pl-6 flex items-end bg-cover" style="background-image: url('{{filme_destaque.thumb.url}}');">   # <========
                    <div>
                        <h2 class="text-6xl font-semibold text-white my-4">
                            {{filme_destaque.titulo}}                                                                                                               # <========
                        </h2>
                        <p class=" w-11/12 md:w-5/12 font-medium text-white my-4">
                            {{filme_destaque.descricao}}                                                                                                            # <========
                        </p>
                        <div class="flex my-4">
                            <a href="{% url 'filme:detalhesfilme' filme_destaque.id %}">                                                                            # <========
                                <button class="flex items-center bg-white py-2 px-5 rounded-md" style='color:black;'>
                                    <ion-icon name="play" class="text-2xl"></ion-icon>
                                    <span class="ml-3 font-medium " >
                                        Play
                                    </span>
                                </button>
                            </a>
                        </div>
                    </div>
                </section> 



=================================================================================================================================================================
# Aula 33: Criando nosso Usuário Personalizado e adaptando o projeto

- No arquivo models.py foi feito o seguinte:

        from django.db import models
        from django.utils import timezone # função timezone para pegar a data da criação
        from django.contrib.auth.models import AbstractUser                                     # <======== Importando bibliotecas

        # Create your models here.

        LISTA_CATEGORIAS = (
            # (informação a ser armazenada no banco de dados , informação que vai aparecer ao usuário ),
            ("ANALISES", "Análises"),
            ("PROGRAMACAO", "Programação"),
            ("APRESENTACAO", "Apresentação"),
            ("OUTROS", "Outros"),
        )

        class Filme(models.Model):
            titulo = models.CharField(max_length=100) # Charfield é um campo de texto pequeno
            thumb = models.ImageField(upload_to='thumb_filmes') # quando a pessoa criar um filme, vai ter que fazer upload dessa imagem, e a imagem vai ser armazenada na pasta THUMB_FILMES
            descricao = models.TextField(max_length=1000) # textfield é um campo de texto maior
            categoria = models.CharField(max_length=15, choices = LISTA_CATEGORIAS) # choices são as opções pra essa variavel
            visualizacoes = models.IntegerField(default=0) # IntegerField é um valor numérico
            data_criacao = models.DateTimeField(default=timezone.now) # datetimefield é o formato de data com horario.   //   função timezone para pegar a data da criação
            
            def __str__(self):
                return self.titulo
            

        class Episodio(models.Model):
            filme = models.ForeignKey('Filme', related_name="episodios", on_delete=models.CASCADE)  
            # O ON_DELETE = MODELS.CASCADE serve para quando eu deletar o filme, os seus episódios sejam apagados também
            titulo = models.CharField(max_length=100)
            video = models.URLField()
            
            def __str__ (self):
                return self.filme.titulo + " - " + self.titulo            
            
            
        class Usuario(AbstractUser):                                                       # <======== Criando nova classe
            filmes_vistos = models.ManyToManyField("Filme")



- Após criar uma nova classe em models.py, tenho que adicionar essa classe no arquivo admin.py . veja o arquivo admin.py:

        from django.contrib import admin
        from .models import Filme, Episodio, Usuario 
        from django.contrib.auth.admin import UserAdmin                       # <======== Importando bibliotecas

        # Register your models here.
        admin.site.register(Filme)
        admin.site.register(Episodio)
        admin.site.register(Usuario, UserAdmin)                               # <======== Registrando o novo usuário




- Depois passar o parametro de AUTH_USER_MODEL no arquivo settings.py :

        AUTH_USER_MODEL = "filme.Usuario"     # <======== Modelo que vai validar a autenticação do usuário. | Usuario = classe do models.py / filme = app filme (( NÃO É A CLASSE FILME ))

        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]


- Feito isso, como criamos classe no arquivo models.py, é necessário dar o comando makemigrate e migrate:

        === python manage.py makemigrations ===
        === python manage.py migrate === 


- AO TENTAR RODAR O PROJETO VAI DAR ERRO: Pois quando o projeto foi criado, nós estavamos usando o modelo de usuário padrão do django, 
mas como agora estamos customizando o modelo de usuário, o django não reconhece esse tipo de usuário, então no caso devemos "resetar" esse padrão.
Para isso tem 2 opções:
    1 deletar os arquivos 0001 0002 e 0003 da pasta migrations, e deletar os arquivos do banco de dados
    2 tentar executar os seguintes comandos:
        - No arquivo settings.py, comentar a linha AUTH_USER_MODEL
        - Rodar o comando:
            ===    python manage.py migrate auth zero    === 
        - No arquivo settings.py, descomentar a linha AUTH_USER_MODEL
        - Rodar o comando:
            ===    python manage.py migrate auth    === 


- Como não deu certo a 2 opção, fazer a 1 opção ( deletar os arquivos 0001 0002 e 0003 da pasta migrations, e deletar o arquivo do banco de dados ) 
- rodar o código:
    === python manage.py makemigrations ===
- Rodar o comando:
    ===    python manage.py migrate ===    


- feito isso criar o superuser com o comando:
    ===    python manage.py createsuperuser   ===    
    agora definir nome de usuário, email e senha


- caso continue dando erro, repetir o processo:
    * Como não deu certo a 2 opção, fazer a 1 opção ( deletar os arquivos 0001 0002 e 0003 da pasta migrations, e deletar o arquivo do banco de dados ) 
    * rodar o código:
        === python manage.py makemigrations ===
    * Rodar o comando:
        ===    python manage.py migrate ===   



- Após dar certo, acessar a tela de admin e clicar no superuser, veja que não tem o campo filmes vistos que está na classe de usuários no arquivo models.py, 
esse campo filmes vistos precisa aparecer ao usuário pois ele foi configurado com o UserAdmin que foi importado no arquivo admin.py.
Só está aparecendo os campos do UserAdmin na tela, mas não estão aparecendo os campos que eu criei " campos_filmes " , 
então temos que editar os campos que o user admin vai mostrar pra gente. veja o arquivo admin.py:

        from django.contrib import admin
        from .models import Filme, Episodio, Usuario 
        from django.contrib.auth.admin import UserAdmin

        # Só existe porque a gente quer que no admin apareça o campo personalizado filmes_vistos
        campos = list(UserAdmin.fieldsets)                                                             # <========
        campos.append(("Histórico", {'fields':('filmes_vistos', )}))                                   # <========
        UserAdmin.fieldsets = tuple(campos)                                                            # <========

        # Register your models here.
        admin.site.register(Filme)
        admin.site.register(Episodio)
        admin.site.register(Usuario, UserAdmin)



=================================================================================================================================================================
# Aula 36: Bloqueio de Páginas apenas para usuários com login

- Bloqueando acesso de usuários sem login:

        from django.shortcuts import render
        from .models import Filme
        from django.views.generic import TemplateView, ListView, DetailView
        from django.contrib.auth.mixins import LoginRequiredMixin                      # <====== LoginRequiredMixin é uma classe em python que eu passo para as CBV


        class Homepage(TemplateView):
            template_name = "homepage.html"
            
            
        class Homefilmes(LoginRequiredMixin,ListView):                                 # <======== Adicionado o LoginRequiredMixin para bloquear acesso de usuarios sem login
            template_name = "homefilmes.html"
            model =  Filme    
          

        class Detalhesfilme(LoginRequiredMixin,DetailView):                            # <======== Adicionado o LoginRequiredMixin para bloquear acesso de usuarios sem login
            template_name = "detalhesfilme.html"
            model = Filme

            def get(self,request,*args,**kwargs): 
            
                # descobrir qual filme ele está acessando:
                filme = self.get_object()
                filme.visualizacoes += 1
                filme.save()   # <===== salva a modificação no banco de dados
                usuario = request.user
                usuario.filmes_vistos.add(filme)
                return super(Detalhesfilme, self).get(request, *args, **kwargs) # redireciona o usuário para a url final
            
            def get_context_data(self, **kwargs):
                context = super(Detalhesfilme, self).get_context_data(**kwargs)
                filmes_relacionados = Filme.objects.filter(categoria = self.get_object().categoria)[0:5] 
                context['filmes_relacionados'] = filmes_relacionados
                return context

        class Pesquisafilme(LoginRequiredMixin,ListView):                             # <======== Adicionado o LoginRequiredMixin para bloquear acesso de usuarios sem login
            template_name = "pesquisa.html"
            model = Filme
            
            def get_queryset(self):
                termo_pesquisa = self.request.GET.get('query')
                if termo_pesquisa:
                    object_list = self.model.objects.filter(titulo__contains=termo_pesquisa)
                    return object_list
                else:
                    return None


- Se eu bloqueio o usuário que não tem login, devo redireciona-lo para uma pagina. Veja o que foi adicionado no o arquivo settings.py :
    - No fim do arquivo settings.py adicionar:

        LOGIN_REDIRECT_URL = 'filme:homefilmes'     # <======== É o link que o usuario vai ser redirecionado quando o usuario fazer o login 
        LOGIN_URL = 'filme:login'                   # <======== É onde o usuário vai fazer o login


- Adicionar o path "caminho" do url do arquivo urls.py da pasta filme:

        from django.urls import path, include
        from .views import Homefilmes, Homepage, Detalhesfilme      
        from django.contrib.auth import views as auth_view


        app_name='filme'

        urlpatterns = [
            path('', Homepage.as_view(), name='homepage'),
            path('filmes/', Homefilmes.as_view(), name='homefilmes'),
            path('filmes/<int:pk>', Detalhesfilme.as_view(),name='detalhesfilme'), 
            path('login/', auth_view.LoginView.as_view(template_name = 'login.html'), name='login'),         # <====== Adicionando os caminhos de login
            path('logout/', auth_view.LogoutView.as_view(template_name = 'logout.html'), name='logout'),     # <====== Adicionando os caminhos de logout
        ]





























