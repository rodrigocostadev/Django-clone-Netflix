

===============================================================================
# Aula 6: Iniciando o Projeto e Estrutura Inicial do Django

sempre que for criar um novo site em django:
    -instalar o django no ambiente virtual
    -roda o codigo no terminal de comando: django-admin startproject nomedoprojeto .    "PONTO NO FINAL PARA CRIAR 1 PASTA E NÃO 2 PASTAS COM O MESMO NOME"
        ===  django-admin startproject hashflix .   ===

=== python manage.py runserver === esse comando cria um link para acessar o site

===============================================================================
# Aula 7: Criando seu 1º app do site

ao abrir o link do site, no navegador digitar admin para aparecer a tela de adm

criando app filme:
    === django-admin startapp filme ===        "DEIXAR O NOME DO APP SEM A LETRA (S), DEIXAR NO SINGULAR MESMO"

após criar o app filme, o próximo passo é criar a estrutura de filmes, essa estrutura ficara em MODELS.PY.
em models.py será criado os filmes, os episódios e os usuários
falta ainda vincular o app com o projeto hashflix

(PASSOS: sempre que criar um novo app, fazer as configurações de: 
    1- settings = "pra instalar o app" da pasta do projeto,
    2- urls da pasta do projeto, pra garantir que os links do app vão aparecer dentro da pasta de urls da pasta projeto 
    3- models pra garantir que as tabelas que construir dentro do app vão aparecer na pagina de adm e vão estar criadas dentro do banco de dados  )

===============================================================================
# Aula 8: Migrations e Criando um SuperUser

Inicializando um usuário:
    === python manage.py migrate === 
    o que faz esse comando?
        Sempre que é feita uma modificação no banco de dados é necessário fazer uma migration, a migration vai atualizar o meu banco de dados
        Sempre que quiser fazer uma modificação no banco de dados (ou sempre que fizer uma modificação em um dos arquivos MODELS.PY ), executar os seguintes codigos:
        === python manage.py makemigrations ===
        === python manage.py migrate === 

Criando um superUser (admin)
    === python manage.py createsuperuser ===
    (após o comando ele vai pedir: 
        Username:
        Email: 
        Password: 
        Repetir Password:   )

        Email e senha do adm no projeto:
            Username (leave blank to use 'rodrigo.costa'): rodrigo.costa
            Email address: rodrigo.costa94@yahoo.com.br 
            Password: camile12 ...
            Password (again): camile12 ...


===============================================================================
# Aula 9: Conectando um app novo no seu projeto

Depois que vc cria o app, a primeira coisa a fazer é instalar o app dentro dos aplicativos do projeto.

1º
    Para instalar, na pasta do projeto "aqui no caso a pasta é hashflix" vá em settings. 
    A parte que voce tem que mecher sempre que instala um aplicativo é a parte INSTALLED APPS, 
    e em INSTALLED APPS adicionar uma linha com o mesmo nome do app que foi criado, "aqui no caso filme"

2º
    Dentro do arquivo de URL's na pasta do projeto, definir qual é o link que vou querer exibir o aplicativo do filme.
    - na parte de importar modulos, adicionar a função (include) =      from django.urls import path, include     <==== ( include adicionado )
    - copiar:
        === path('blog/', include('blog.urls')) ===
        colar esse path em urlpatterns = [ ... ]

(PASSOS: sempre que criar um novo app, fazer as configurações de: 
    1- settings = "pra instalar o app" da pasta do projeto,
    2- urls da pasta do projeto, pra garantir que os links do app vão aparecer dentro da pasta de urls da pasta projeto 
    3- models pra garantir que as tabelas que construir dentro do app vão aparecer na pagina de adm e vão estar criadas dentro do banco de dados  )


===============================================================================
Aula 11: Criando o modelo do Filme - Adicionar tabelas no Banco 

nessa aula vamos contruir os nossos modelos, ou seja as tabelas onde vamos armazenar as informações dos filmes.

dentro da pasta do app "que no caso é filmes", no arquivo MODELS vamos construir e criar o objeto do filme dentro do nosso site 

cada tabela dentro do banco de dados vai ser uma classe do python.

sempre que quiser criar algo novo que o seu site vai ter, e precisar ser salvo no banco de dados, cada coisa dessa será um MODELO dentro do models.py "pasta do app"

Ao criar a classe do filme em models.py "pasta do app", eu defino ela da seguinte maneira:
    class Filme(models.Model):  "filme é uma subclasse de models.Model"
Logo apos isso devo definir os campos/ informações que a minha classe filme tera:

    from django.db import models
    from django.utils import timezone # função timezone para pegar a data da criação

    # Create your models here.

    LISTA_CATEGORIAS = (
        # (informação a ser armazenada no banco de dados , informação que vai aparecer ao usuário ),
        ("ANALISES", "Análises"),
        ("PROGRAMACAO", "Programação"),
        ("APRESENTACAO", "Apresentação"),
        ("OUTROS", "Outros"),
    )

    # Criar o Filme 
    class Filme(models.Model):
        titulo = models.CharField(max_length=100) # Charfield é um campo de texto pequeno
        thumb = models.ImageField(upload_to='thumb_filmes') # quando a pessoa criar um filme, vai ter que fazer upload dessa imagem, e a imagem vai ser armazenada na pasta THUMB_FILMES
        descricao = models.TextField(max_length=1000) # textfield é um campo de texto maior
        categoria = models.CharField(max_length=15, choices = LISTA_CATEGORIAS) # choices são as opções pra essa variavel
        visualizacoes = models.IntegerField(default=0) # IntegerField é um valor numérico
        data_criacao = models.DateTimeField(default=timezone.now) # datetimefield é o formato de data com horario.   //   função timezone para pegar a data da criação

baixar a biblioteca Pillow para o django trabalhar com imagens:
        === pip install pillow ===

agora que criamos uma nova tabela no banco de dados, precisa fazer as migrações para atualizar o banco de dados com os comandos:
        === python manage.py makemigrations ===
        === python manage.py migrate === 
 


===============================================================================
# Aula 12: Adicionando o modelo do Filme no Administrador

No arquivo admin do app filmes, digitar:
    from django.contrib import admin
    from .models import Filme    # (IMPORTAR O FILME) o ponto de .models significa que estou importando da mesma pasta, no caso models.py esta na mesma pasta que admin.py

    # Register your models here.
    admin.site.register(Filme)   # (REGISTRAR O FILME)

(Na aula o lira adiciona um filme pela tela de admin, colocando titulo, thumbnail e descrição)

- Ao terminar o registro do filme direto pela tela do admin, ele mostra o filme que foi recem adicionado com o nome de " Filme object(1) ", 
para alterar isso deve-se mexer na classe do filme, adicionando a função de string dele, veja:

        def __str__(self):
            return self.titulo


===============================================================================
# Aula 13: Configurando pastas static e media

-Diferença entre STATIC e MEDIA:
    MEDIA: No instagram um usuário pode postar uma foto, essa foto postada é uma media
    STATIC: Uma foto ou imagem que eu criador do instagram subo para definir a logo do instagram é uma STATIC

-Definindo a pasta para os arquivos statics e medias:
    no site do django documentation, copiei o seguinte trecho de codigo:    

    STATICFILES_DIRS = [
        BASE_DIR / "static",
        "/var/www/static/",
    ]

    Esse trecho de codigo vai ser colado em settings, logo abaixo de STATIC_URL = 'static/'

    Agora que foi definido o nome da minha pasta "static", é preciso criar manualmente essa pasta na pasta principal do arquivo, fora da pasta filmes e da pasta hashflix
    precisa ser criado na pasta raiz, no caso a pasta Django-clone-netflix

-Feito isso é preciso adicionar o seguinte trecho de codigo que foi tirado da pagina de documentação do django em URLPATTERNS da pagina URL's na pasta do projeto "hashflix":
        + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)




                deixando desse jeito (sem alterar o anterior, somente incrementando):


        urlpatterns = [
            path('admin/', admin.site.urls),
            # path('/', include('filme.urls')),
        ]

        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



-também é necessário importar a biblioteca static e settings:
    from django.conf import settings
    from django.conf.urls.static import static







-tudo vai ficar desse jeito:

    from django.contrib import admin
    from django.urls import path, include
    from django.conf import settings
    from django.conf.urls.static import static

    urlpatterns = [
        path('admin/', admin.site.urls),
        # path('/', include('filme.urls')),
    ]

    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)



((((  agora a parte de media  ))))

-adicionando ao arquivo urlpatterns da pasta do projeto "hashflix": 
    + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


    8:30 aula 13

        
